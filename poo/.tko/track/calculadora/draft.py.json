{
    "patches": [
        {
            "label": "2025-10-03_19-20-53",
            "content": "import sys \n\nclass Calculator:\n    \"\"\"\n    Representa uma calculadora que consome bateria para realizar opera\u00e7\u00f5es.\n    \"\"\"\n    def __init__(self, batteryMax: int):\n        \"\"\"\n        Inicializa a calculadora com uma capacidade m\u00e1xima de bateria.\n        \"\"\"\n        self.batteryMax = batteryMax\n        self.battery = 0\n        self.display = 0.0\n\n    def __str__(self) -> str:\n        \"\"\"\n        Retorna a representa\u00e7\u00e3o da calculadora em formato de string.\n        Exemplo: display = 0.00, battery = 0\n        \"\"\"\n        return f\"display = {self.display:.2f}, battery = {self.battery}\"\n\n    def charge(self, increment: int):\n        \"\"\"\n        Adiciona carga \u00e0 bateria, sem ultrapassar o limite m\u00e1ximo.\n        \"\"\"\n        self.battery += increment\n        if self.battery > self.batteryMax:\n            self.battery = self.batteryMax\n\n    def sum(self, a: float, b: float):\n        \"\"\"\n        Soma dois n\u00fameros e armazena o resultado no display.\n        Gasta 1 ponto de bateria.\n        \"\"\"\n        if self.battery <= 0:\n            print(\"fail: bateria insuficiente\")\n            return\n        self.battery -= 1\n        self.display = a + b\n\n    def div(self, num: float, den: float):\n        \"\"\"\n        Divide dois n\u00fameros e armazena o resultado no display.\n        Gasta 1 ponto de bateria.\n        Verifica se h\u00e1 bateria e se o denominador n\u00e3o \u00e9 zero.\n        \"\"\"\n        if self.battery <= 0:\n            print(\"fail: bateria insuficiente\")\n            return\n        if den == 0:\n            print(\"fail: divisao por zero\")\n            return\n        self.battery -= 1\n        self.display = num / den\n\ndef main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal que processa os comandos do usu\u00e1rio.\n    \"\"\"\n    calculator = None\n\n    for line in sys.stdin:\n        # Remove espa\u00e7os em branco e quebras de linha\n        command_line = line.strip()\n        print(f\"$ {command_line}\")\n        \n        # Divide a linha em argumentos\n        args = command_line.split(\" \")\n        command = args[0]\n\n        if command == \"end\":\n            break\n        elif command == \"init\":\n            # Cria a inst\u00e2ncia da calculadora com a bateria m\u00e1xima\n            calculator = Calculator(int(args[1]))\n        elif calculator is None:\n            # Garante que a calculadora foi inicializada\n            print(\"fail: a calculadora precisa ser iniciada\")\n        elif command == \"show\":\n            print(calculator)\n        elif command == \"charge\":\n            calculator.charge(int(args[1]))\n        elif command == \"sum\":\n            calculator.sum(float(args[1]), float(args[2]))\n        elif command == \"div\":\n            # O primeiro argumento \u00e9 o numerador, o segundo \u00e9 o denominador\n            calculator.div(float(args[1]), float(args[2]))\n        else:\n            print(\"fail: comando invalido\")\n\n# Executa a fun\u00e7\u00e3o principal\nif __name__ == \"__main__\":\n    main()",
            "lines": "93"
        }
    ]
}